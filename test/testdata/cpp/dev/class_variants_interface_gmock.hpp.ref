#ifndef test_double_gmock_hpp
#define test_double_gmock_hpp
#include "test_double.hpp"
#include "gmock/gmock.h"

namespace no_inherit {
namespace TestDouble {
class MockVirtualWithDtor : public ::no_inherit::VirtualWithDtor {
public:
    virtual ~MockVirtualWithDtor() {}

};
} //NS:TestDouble

namespace TestDouble {
class MockCtorNotAffectingVirtualClassificationAsYes : public ::no_inherit::CtorNotAffectingVirtualClassificationAsYes {
public:
    virtual ~MockCtorNotAffectingVirtualClassificationAsYes() {}

    MOCK_METHOD0(foo, void());
};
} //NS:TestDouble

namespace TestDouble {
class MockCtorNotAffectingVirtualClassificationAsPure : public ::no_inherit::CtorNotAffectingVirtualClassificationAsPure {
public:
    virtual ~MockCtorNotAffectingVirtualClassificationAsPure() {}

    MOCK_METHOD0(foo, void());
};
} //NS:TestDouble

namespace TestDouble {
class MockCommonPatternForPureInterface1 : public ::no_inherit::CommonPatternForPureInterface1 {
public:
    virtual ~MockCommonPatternForPureInterface1() {}

    MOCK_METHOD0(expect_func_to_be_mocked, void());
};
} //NS:TestDouble

namespace TestDouble {
class MockCommonPatternForPureInterface2 : public ::no_inherit::CommonPatternForPureInterface2 {
public:
    virtual ~MockCommonPatternForPureInterface2() {}

    MOCK_METHOD0(expect_func_to_be_mocked, void());
};
} //NS:TestDouble

namespace TestDouble {
class MockAllProtPrivMadePublic : public ::no_inherit::AllProtPrivMadePublic {
public:
    virtual ~MockAllProtPrivMadePublic() {}

    MOCK_METHOD0(a_protected, void());
    MOCK_METHOD0(a_private, void());
};
} //NS:TestDouble

} //NS:no_inherit
namespace inherit {
namespace TestDouble {
class MockDerivedVirtual : public ::inherit::DerivedVirtual {
public:
    virtual ~MockDerivedVirtual() {}

    MOCK_METHOD0(derived_func, void());
};
} //NS:TestDouble

} //NS:inherit
#endif // test_double_gmock_hpp
