#include "test_double.hpp"
#include <string.h>

extern int expect_b;
extern int *expect_d;
extern int **expect_e;
extern int *const expect_g;
extern my_int expect_my_int;

namespace {
TestDouble::I_TestDouble* test_double_inst = 0;
} //NS:

namespace TestDouble {
ZeroGlobals::ZeroGlobals() {}
ZeroGlobals::~ZeroGlobals() {}
void ZeroGlobals::expect_b() {
    memset(&expect_b, 0, sizeof(int));
}
void ZeroGlobals::expect_d() {
    memset(&expect_d, 0, sizeof(int *));
}
void ZeroGlobals::expect_e() {
    memset(&expect_e, 0, sizeof(int **));
}
void ZeroGlobals::expect_g() {
    memset(&expect_g, 0, sizeof(int *const));
}
void ZeroGlobals::expect_my_int() {
    memset(&expect_my_int, 0, sizeof(my_int));
}

Adapter::Adapter(I_InitGlobals& init_globals) {
    init_globals.expect_b();
    init_globals.expect_d();
    init_globals.expect_e();
    init_globals.expect_g();
    init_globals.expect_my_int();
}

Adapter::~Adapter() {
    test_double_inst = 0;
}

} //NS:TestDouble
