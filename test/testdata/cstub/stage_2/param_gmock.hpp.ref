#ifndef test_double_hpp
#define test_double_hpp
extern "C" {
#include "param_gmock.h"
}

namespace TestDouble {
class I_TestDouble {
public:
    virtual void array_func(int x, int *y, int z[16]) = 0;
    virtual void array_func_param_typedef(MyIntType x0[16]) = 0;
    virtual const int c_func_one_named(const int a) = 0;
    virtual const int c_func_return() = 0;
    virtual void c_func_three_named(const int a, const int b, const int c) = 0;
    virtual void c_func_two_named(const int a, const int b) = 0;
    virtual void c_func_with_struct(const struct A *a) = 0;
    virtual func_type * cyber(const unsigned int baz) = 0;
    virtual void fun(func_ptr2 p, Something_Big b) = 0;
    virtual void func_exhibit_type_bug_variant1(const djur_type a) = 0;
    virtual djur_type func_exhibit_type_bug_variant2() = 0;
    virtual int func_extern(int out) = 0;
    virtual int func_one_named(int a) = 0;
    virtual void func_ptr_arg(int (*a)(int p, int ), int b) = 0;
    virtual int func_return() = 0;
    virtual gun_ptr func_return_func_ptr() = 0;
    virtual void func_three_named(int a, int b, int c) = 0;
    virtual void func_two_named(int a, int b) = 0;
    virtual void func_variadic() = 0;
    virtual int func_variadic_one_unnamed(char *x0) = 0;
    virtual void func_void() = 0;
    virtual void func_with_enum_param(const djur_type a) = 0;
    virtual djur_type func_with_enum_param_and_return(const djur_type a) = 0;
    virtual void gun_func(int x0) = 0;
    virtual func_type * leopard(const unsigned int baz) = 0;
    virtual void tiger() = 0;
    virtual int typedef_array_func(int *x, int z[16]) = 0;
    virtual void unnamed_params(int x0, int x1) = 0;
    virtual ~I_TestDouble() {}
};

class I_TestDouble_InitGlobals {
public:
    virtual void e_a() = 0;
    virtual void e_array_func() = 0;
    virtual void e_b() = 0;
    virtual void e_c() = 0;
    virtual void e_e() = 0;
    virtual void e_f() = 0;
    virtual void e_g() = 0;
    virtual void hest() = 0;
    virtual ~I_TestDouble_InitGlobals() {}
};

class Test_ZeroGlobals : public I_TestDouble_InitGlobals {
public:
    Test_ZeroGlobals();
    virtual void e_a();
    virtual void e_array_func();
    virtual void e_b();
    virtual void e_c();
    virtual void e_e();
    virtual void e_f();
    virtual void e_g();
    virtual void hest();
    virtual ~Test_ZeroGlobals();
};

/// Adapter connecting an interface with an implementation.
/// The lifetime of the connection is the same as the instance of the adapter.
class Adapter {
public:
    Adapter(I_TestDouble& inst);
    Adapter(I_TestDouble& inst, I_TestDouble_InitGlobals& init_globals);
    ~Adapter();
};

} //NS:TestDouble

#endif // test_double_hpp
